package com.example.ruler.noteapplication.Data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EDIT_RECORD".
*/
public class EditRecordDao extends AbstractDao<EditRecord, Long> {

    public static final String TABLENAME = "EDIT_RECORD";

    /**
     * Properties of entity EditRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EditId = new Property(0, Long.class, "EditId", true, "_id");
        public final static Property BoforeUpdateContent = new Property(1, String.class, "boforeUpdateContent", false, "BOFORE_UPDATE_CONTENT");
        public final static Property AfterUpdateContent = new Property(2, String.class, "afterUpdateContent", false, "AFTER_UPDATE_CONTENT");
        public final static Property LastUpdateAt = new Property(3, java.util.Date.class, "lastUpdateAt", false, "LAST_UPDATE_AT");
        public final static Property NoteId = new Property(4, long.class, "noteId", false, "NOTE_ID");
    }


    public EditRecordDao(DaoConfig config) {
        super(config);
    }
    
    public EditRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EDIT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: EditId
                "\"BOFORE_UPDATE_CONTENT\" TEXT," + // 1: boforeUpdateContent
                "\"AFTER_UPDATE_CONTENT\" TEXT," + // 2: afterUpdateContent
                "\"LAST_UPDATE_AT\" INTEGER," + // 3: lastUpdateAt
                "\"NOTE_ID\" INTEGER NOT NULL );"); // 4: noteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EDIT_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EditRecord entity) {
        stmt.clearBindings();
 
        Long EditId = entity.getEditId();
        if (EditId != null) {
            stmt.bindLong(1, EditId);
        }
 
        String boforeUpdateContent = entity.getBoforeUpdateContent();
        if (boforeUpdateContent != null) {
            stmt.bindString(2, boforeUpdateContent);
        }
 
        String afterUpdateContent = entity.getAfterUpdateContent();
        if (afterUpdateContent != null) {
            stmt.bindString(3, afterUpdateContent);
        }
 
        java.util.Date lastUpdateAt = entity.getLastUpdateAt();
        if (lastUpdateAt != null) {
            stmt.bindLong(4, lastUpdateAt.getTime());
        }
        stmt.bindLong(5, entity.getNoteId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EditRecord entity) {
        stmt.clearBindings();
 
        Long EditId = entity.getEditId();
        if (EditId != null) {
            stmt.bindLong(1, EditId);
        }
 
        String boforeUpdateContent = entity.getBoforeUpdateContent();
        if (boforeUpdateContent != null) {
            stmt.bindString(2, boforeUpdateContent);
        }
 
        String afterUpdateContent = entity.getAfterUpdateContent();
        if (afterUpdateContent != null) {
            stmt.bindString(3, afterUpdateContent);
        }
 
        java.util.Date lastUpdateAt = entity.getLastUpdateAt();
        if (lastUpdateAt != null) {
            stmt.bindLong(4, lastUpdateAt.getTime());
        }
        stmt.bindLong(5, entity.getNoteId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EditRecord readEntity(Cursor cursor, int offset) {
        EditRecord entity = new EditRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // EditId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // boforeUpdateContent
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // afterUpdateContent
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // lastUpdateAt
            cursor.getLong(offset + 4) // noteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EditRecord entity, int offset) {
        entity.setEditId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBoforeUpdateContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAfterUpdateContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastUpdateAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setNoteId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EditRecord entity, long rowId) {
        entity.setEditId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EditRecord entity) {
        if(entity != null) {
            return entity.getEditId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EditRecord entity) {
        return entity.getEditId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
