package com.example.ruler.noteapplication.Data;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.example.ruler.noteapplication.Data.Customer;
import com.example.ruler.noteapplication.Data.Note;
import com.example.ruler.noteapplication.Data.Tag;
import com.example.ruler.noteapplication.Data.EditRecord;
import com.example.ruler.noteapplication.Data.NoteBook;
import com.example.ruler.noteapplication.Data.Order;
import com.example.ruler.noteapplication.Data.TestUser2;
import com.example.ruler.noteapplication.Data.JoinTagTest2User;
import com.example.ruler.noteapplication.Data.JoinNoteEditRecord;
import com.example.ruler.noteapplication.Data.JoinNoteTag;
import com.example.ruler.noteapplication.Data.JoinTagUser;
import com.example.ruler.noteapplication.Data.Mark;

import com.example.ruler.noteapplication.Data.CustomerDao;
import com.example.ruler.noteapplication.Data.NoteDao;
import com.example.ruler.noteapplication.Data.TagDao;
import com.example.ruler.noteapplication.Data.EditRecordDao;
import com.example.ruler.noteapplication.Data.NoteBookDao;
import com.example.ruler.noteapplication.Data.OrderDao;
import com.example.ruler.noteapplication.Data.TestUser2Dao;
import com.example.ruler.noteapplication.Data.JoinTagTest2UserDao;
import com.example.ruler.noteapplication.Data.JoinNoteEditRecordDao;
import com.example.ruler.noteapplication.Data.JoinNoteTagDao;
import com.example.ruler.noteapplication.Data.JoinTagUserDao;
import com.example.ruler.noteapplication.Data.MarkDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig customerDaoConfig;
    private final DaoConfig noteDaoConfig;
    private final DaoConfig tagDaoConfig;
    private final DaoConfig editRecordDaoConfig;
    private final DaoConfig noteBookDaoConfig;
    private final DaoConfig orderDaoConfig;
    private final DaoConfig testUser2DaoConfig;
    private final DaoConfig joinTagTest2UserDaoConfig;
    private final DaoConfig joinNoteEditRecordDaoConfig;
    private final DaoConfig joinNoteTagDaoConfig;
    private final DaoConfig joinTagUserDaoConfig;
    private final DaoConfig markDaoConfig;

    private final CustomerDao customerDao;
    private final NoteDao noteDao;
    private final TagDao tagDao;
    private final EditRecordDao editRecordDao;
    private final NoteBookDao noteBookDao;
    private final OrderDao orderDao;
    private final TestUser2Dao testUser2Dao;
    private final JoinTagTest2UserDao joinTagTest2UserDao;
    private final JoinNoteEditRecordDao joinNoteEditRecordDao;
    private final JoinNoteTagDao joinNoteTagDao;
    private final JoinTagUserDao joinTagUserDao;
    private final MarkDao markDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        customerDaoConfig = daoConfigMap.get(CustomerDao.class).clone();
        customerDaoConfig.initIdentityScope(type);

        noteDaoConfig = daoConfigMap.get(NoteDao.class).clone();
        noteDaoConfig.initIdentityScope(type);

        tagDaoConfig = daoConfigMap.get(TagDao.class).clone();
        tagDaoConfig.initIdentityScope(type);

        editRecordDaoConfig = daoConfigMap.get(EditRecordDao.class).clone();
        editRecordDaoConfig.initIdentityScope(type);

        noteBookDaoConfig = daoConfigMap.get(NoteBookDao.class).clone();
        noteBookDaoConfig.initIdentityScope(type);

        orderDaoConfig = daoConfigMap.get(OrderDao.class).clone();
        orderDaoConfig.initIdentityScope(type);

        testUser2DaoConfig = daoConfigMap.get(TestUser2Dao.class).clone();
        testUser2DaoConfig.initIdentityScope(type);

        joinTagTest2UserDaoConfig = daoConfigMap.get(JoinTagTest2UserDao.class).clone();
        joinTagTest2UserDaoConfig.initIdentityScope(type);

        joinNoteEditRecordDaoConfig = daoConfigMap.get(JoinNoteEditRecordDao.class).clone();
        joinNoteEditRecordDaoConfig.initIdentityScope(type);

        joinNoteTagDaoConfig = daoConfigMap.get(JoinNoteTagDao.class).clone();
        joinNoteTagDaoConfig.initIdentityScope(type);

        joinTagUserDaoConfig = daoConfigMap.get(JoinTagUserDao.class).clone();
        joinTagUserDaoConfig.initIdentityScope(type);

        markDaoConfig = daoConfigMap.get(MarkDao.class).clone();
        markDaoConfig.initIdentityScope(type);

        customerDao = new CustomerDao(customerDaoConfig, this);
        noteDao = new NoteDao(noteDaoConfig, this);
        tagDao = new TagDao(tagDaoConfig, this);
        editRecordDao = new EditRecordDao(editRecordDaoConfig, this);
        noteBookDao = new NoteBookDao(noteBookDaoConfig, this);
        orderDao = new OrderDao(orderDaoConfig, this);
        testUser2Dao = new TestUser2Dao(testUser2DaoConfig, this);
        joinTagTest2UserDao = new JoinTagTest2UserDao(joinTagTest2UserDaoConfig, this);
        joinNoteEditRecordDao = new JoinNoteEditRecordDao(joinNoteEditRecordDaoConfig, this);
        joinNoteTagDao = new JoinNoteTagDao(joinNoteTagDaoConfig, this);
        joinTagUserDao = new JoinTagUserDao(joinTagUserDaoConfig, this);
        markDao = new MarkDao(markDaoConfig, this);

        registerDao(Customer.class, customerDao);
        registerDao(Note.class, noteDao);
        registerDao(Tag.class, tagDao);
        registerDao(EditRecord.class, editRecordDao);
        registerDao(NoteBook.class, noteBookDao);
        registerDao(Order.class, orderDao);
        registerDao(TestUser2.class, testUser2Dao);
        registerDao(JoinTagTest2User.class, joinTagTest2UserDao);
        registerDao(JoinNoteEditRecord.class, joinNoteEditRecordDao);
        registerDao(JoinNoteTag.class, joinNoteTagDao);
        registerDao(JoinTagUser.class, joinTagUserDao);
        registerDao(Mark.class, markDao);
    }
    
    public void clear() {
        customerDaoConfig.clearIdentityScope();
        noteDaoConfig.clearIdentityScope();
        tagDaoConfig.clearIdentityScope();
        editRecordDaoConfig.clearIdentityScope();
        noteBookDaoConfig.clearIdentityScope();
        orderDaoConfig.clearIdentityScope();
        testUser2DaoConfig.clearIdentityScope();
        joinTagTest2UserDaoConfig.clearIdentityScope();
        joinNoteEditRecordDaoConfig.clearIdentityScope();
        joinNoteTagDaoConfig.clearIdentityScope();
        joinTagUserDaoConfig.clearIdentityScope();
        markDaoConfig.clearIdentityScope();
    }

    public CustomerDao getCustomerDao() {
        return customerDao;
    }

    public NoteDao getNoteDao() {
        return noteDao;
    }

    public TagDao getTagDao() {
        return tagDao;
    }

    public EditRecordDao getEditRecordDao() {
        return editRecordDao;
    }

    public NoteBookDao getNoteBookDao() {
        return noteBookDao;
    }

    public OrderDao getOrderDao() {
        return orderDao;
    }

    public TestUser2Dao getTestUser2Dao() {
        return testUser2Dao;
    }

    public JoinTagTest2UserDao getJoinTagTest2UserDao() {
        return joinTagTest2UserDao;
    }

    public JoinNoteEditRecordDao getJoinNoteEditRecordDao() {
        return joinNoteEditRecordDao;
    }

    public JoinNoteTagDao getJoinNoteTagDao() {
        return joinNoteTagDao;
    }

    public JoinTagUserDao getJoinTagUserDao() {
        return joinTagUserDao;
    }

    public MarkDao getMarkDao() {
        return markDao;
    }

}
