package com.example.ruler.noteapplication.Data;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Createdate = new Property(4, java.util.Date.class, "createdate", false, "CREATEDATE");
        public final static Property NoteBookId = new Property(5, long.class, "noteBookId", false, "NOTE_BOOK_ID");
        public final static Property TagId = new Property(6, long.class, "tagId", false, "TAG_ID");
    }

    private DaoSession daoSession;

    private Query<Note> tag_NotesQuery;
    private Query<Note> noteBook_NotesQuery;

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"AUTHOR\" TEXT," + // 3: author
                "\"CREATEDATE\" INTEGER," + // 4: createdate
                "\"NOTE_BOOK_ID\" INTEGER NOT NULL ," + // 5: noteBookId
                "\"TAG_ID\" INTEGER NOT NULL );"); // 6: tagId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        java.util.Date createdate = entity.getCreatedate();
        if (createdate != null) {
            stmt.bindLong(5, createdate.getTime());
        }
        stmt.bindLong(6, entity.getNoteBookId());
        stmt.bindLong(7, entity.getTagId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        java.util.Date createdate = entity.getCreatedate();
        if (createdate != null) {
            stmt.bindLong(5, createdate.getTime());
        }
        stmt.bindLong(6, entity.getNoteBookId());
        stmt.bindLong(7, entity.getTagId());
    }

    @Override
    protected final void attachEntity(Note entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createdate
            cursor.getLong(offset + 5), // noteBookId
            cursor.getLong(offset + 6) // tagId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setNoteBookId(cursor.getLong(offset + 5));
        entity.setTagId(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "notes" to-many relationship of Tag. */
    public List<Note> _queryTag_Notes(Long tagId) {
        synchronized (this) {
            if (tag_NotesQuery == null) {
                QueryBuilder<Note> queryBuilder = queryBuilder();
                queryBuilder.join(JoinNoteTag.class, JoinNoteTagDao.Properties.NoteId)
                    .where(JoinNoteTagDao.Properties.TagId.eq(tagId));
                tag_NotesQuery = queryBuilder.build();
            }
        }
        Query<Note> query = tag_NotesQuery.forCurrentThread();
        query.setParameter(0, tagId);
        return query.list();
    }

    /** Internal query to resolve the "notes" to-many relationship of NoteBook. */
    public List<Note> _queryNoteBook_Notes(long noteBookId) {
        synchronized (this) {
            if (noteBook_NotesQuery == null) {
                QueryBuilder<Note> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NoteBookId.eq(null));
                noteBook_NotesQuery = queryBuilder.build();
            }
        }
        Query<Note> query = noteBook_NotesQuery.forCurrentThread();
        query.setParameter(0, noteBookId);
        return query.list();
    }

}
